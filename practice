###<icon的符号引用>
  （线上，不需下载文件）这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇文章这种用法其实是一个svg的集合，与上面两种等级具有以下特点：
支持多色图标了，不再受单色限制。
1.通过一些技巧，支持像字体那样，通过font-size,color来调整样式。
2.兼容性较差，支持 ie9+,及现代浏览器。
3.浏览器渲染svg的性能一般，还不如png。
  第一步：拷贝项目下面生成的symbol代码作为JS文件引入，代码之前需加'http：'：
//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js
  第二步：加入通用css代码（引入一次就行）：
<style type="text/css">
    .icon {
       width: 1em; height: 1em;
       vertical-align: -0.15em;
       fill: currentColor;
       overflow: hidden;
    }
</style>
  第三步：复制相应图标代码作为链接：
<svg class="icon" aria-hidden="true">
    <use xlink:href="#icon-xxx"></use>
</svg>
注意：1.修改icon大小（改svg）用font-size，位置用height.
     2.部分icon颜色不可修改，在我的项目中批量操作-批量去色，即可在css中修改color.
%%%疑问(已解决)：将svg放在div中，设置了div的不透明度opacity，但svg的不透明度也跟着改变，无法设置svg的不透明度。
      解决方法：用rgba设置div的background-color。

###<LOGO SEO优化>
  1.logo里放一个h1标签，目的是提权，告诉搜索引擎这里很重要。
  2.h1里再放一个链接，可以返回首页的，logo图片作为连接的背景图片。
  3.为了让搜索引擎收录网站，链接里要放文字（网站名称），但文字不要显示出来。
    方法1：把文字移到盒子外面（text-indent：-9999px），然后overflow：hidden，淘宝的做法。
    方法2：直接font-size：0；就看不到文字了，京东的做法。
  4.给链接一个title属性，这样鼠标放在logo上就可以看到提示文字了。
  
###<CSS3盒子模型>
  1、box-sizing:content-box盒子大小为width+padding+margin。这种盒子模型也就是CSS2的盒子模型。
  2、box-sizing:border-box盒子大小为width。也就是说margin和padding在width中，只要width给值后，不管你怎么改变padding或margin的值，盒子总的大小是不会变的，它只会向内缩，减小内容的区域。

###<CSS3过渡效果>
  transition属性， transition：属性名称 过渡时间 速度曲线 何时开始，属性2名称 ...
  例：<li><a>123</a></li>  li底色变色，li中a文字变色
      li{
        width: 210px;
        height: 32px;
        background-color: #c81623;
        transition: padding 0.7s, color 0.7s;
      }
      .dropdown li:hover{
         padding-left: 10px;
         background-color: #fff;
      }
      .dropdown li:hover a{
         color: #c81623;
      }//当经过li时，li中a属性改变的写法.
  
###<外边距塌陷>
  设置子元素的margin-top，但是却发现子元素没有出现上外边距的效果，反而是父元素出现了上外边距的效果。
  解决方法：1、为父元素设置border；

           2、为父元素添加overflow：hidden；样式；

           3、为父元素或者子元素声明浮动；

           4、为父元素或者子元素声明绝对定位；

###<JavaScript 垃圾回收机制及性能问题>
  JavaScript 具有自动垃圾收集机制，也就是说，执行环境会负责管理代码执行过程中使用的内存；
  在编写 JavaScript 程序时，开发人员不用再关心内存使用问题，所需内存的分配以及无用内存的回收完全实现了自动管理。
  这种垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。
  为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间），周期性地执行这一操作。
  *标记清除*
      1、垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。
      2、它会去掉环境中的变量以及被环境中的变量引用的变量的标记。
      3、在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。
      4、最后，垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。
   
   性能问题
      垃圾收集器是周期性运行的，而且如果为变量分配的内存数量很可观，那么回收工作量也是相当大的。
      在这种情况下，确定垃圾收集的时间间隔是一个非常重要的问题。
      随着 IE7 的发布，其 JavaScript 引擎的垃圾收集例程改变了工作方式：
      触发垃圾收集的变量分配、字面量和（或）数组元素的临界值被调整为动态修正。IE7 中的各项临界值在初始时与 IE6 相等。
          1.如果垃圾收集例程回收的内存分配量低于 15%，则变量、字面量和（或）数组元素的临界值就会加倍。
          2.如果例程回收了 85%的内存分配量，则将各种临界值重置回默认值。
      
      因此，确保占用最少的内存可以让页面获得更好的性能。而优化内存占用的最佳方式，就是为执行中的代码只保存必要的数据。
      一旦数据不再有用，最好通过将其值设置为 null 来释放其引用——这个做法叫做解除引用（dereferencing）

###<外边距合并>
  方法一：设置父元素的overflow属性为hidden。
  方法二：设置父元素的border属性，如：border:1px solid red;

###<电梯导航栏>
  用固定定位position：fixed；
  横向用left：50%；再margin-left负的左位移值。

###<:nth-child(n)>
  :nth-child(n)    ---->选中某个元素，该元素必须是某个父元素下的第n个子元素；
  p:nth-child(n)   ---->选中p元素，且该p元素必须是某个父元素下的第n个子元素
  注意：n是从1开始的
  注意：p:nth-child(1)，只会选中p的父元素中的第一个子元素p;
       若p的父元素中第一个元素不是p，则不会选中除了第一个元素后的第一个p。

###<super关键字>
  子类调用父类中使用this.x,this.y的方法时，构造函数传参使用super（x，y）；来使用父类的构造方法。
  注意：子类构造函数中super必须在this之前调用。

###浏览器：渲染引擎和JS引擎
  渲染引擎：解析HTML和CSS，俗称内核。比如chrome的blink，老版本webkit.
  JS引擎：JS解释器，对JS代码处理后运行。比如chrome的V8.

###脚本语言：逐行解释执行

###JavaScript：ECMAScript：语法
              DOM：页面文档对象模型
              BOM：浏览器对象模型

###输入框：prompt('');
   弹出警示框：alert('');
   控制台输出：console.log('');
   







































